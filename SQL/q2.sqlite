/* Find the names of all students who are friends with someone named Gabriel. */
SELECT name
 FROM Highschooler, Friend
 JOIN (SELECT id FROM Highschooler WHERE name='Gabriel' ) AS I ON Friend.id1=I.id
 WHERE Highschooler.id=Friend.id2;

/* For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like. */
SELECT H1.name, H1.grade,  H2.name, H2.grade 
 FROM Highschooler H1, Highschooler H2, Likes
 WHERE H1.id = Likes.id1 AND H2.id = Likes.id2 AND H1.grade-H2.grade >= 2;

/* For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order. */
SELECT name1, grade1, name2, grade2 
 FROM (SELECT H1.name as name1, H1.grade as grade1,  H2.name as name2, H2.grade as grade2
  FROM Highschooler H1, Highschooler H2, Likes L1
  WHERE  H1.id = L1.id1 AND H2.id = L1.id2 AND L1.ID1 in (SELECT ID2 
    FROM Likes 
    WHERE H1.id = Likes.id2 AND H2.id= Likes.id1))
  WHERE name1 < name2

/* Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. */
SELECT name, grade
 FROM Highschooler
 WHERE ID not in (SELECT ID1
   FROM Likes
   UNION
   SELECT ID2
   FROM Likes)
 ORDER BY grade, name;

/* For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. */
SELECT distinct H1.name, H1.grade, H2.name, H2.grade
 FROM Highschooler H1, Likes, Highschooler H2
 WHERE H1.ID = Likes.ID1
  AND Likes.ID2 = H2.ID
  AND H2.ID not in (SELECT ID1 FROM Likes);

/* Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. */
SELECT name, grade
 FROM Highschooler
 WHERE ID not in (SELECT ID1
  FROM Highschooler H1, Friend, Highschooler H2
  WHERE H1.ID = Friend.ID1 AND Friend.ID2 = H2.ID AND H1.grade <> H2.grade)
 ORDER BY grade, name;

/* For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. */
SELECT distinct H1.name, H1.grade, H2.name, H2.grade, H3.name, H3.grade
 FROM Highschooler H1, Likes, Highschooler H2, Highschooler H3, Friend F1, Friend F2
 WHERE H1.ID = Likes.ID1 AND Likes.ID2 = H2.ID AND H2.ID not in (SELECT ID2
   FROM Friend
   WHERE ID1 = H1.ID)
 AND H1.ID = F1.ID1 AND F1.ID2 = H3.ID AND H3.ID = F2.ID1 AND F2.ID2 = H2.ID;

/* Find the difference between the number of students in the school and the number of different first names. */
SELECT stdnt.ct_s - name.ct_dn
 FROM
 (SELECT count(*) as ct_s
   FROM Highschooler) as stdnt,
 (SELECT count(distinct name) as ct_dn
   FROM Highschooler) as name;

/* Find the name and grade of all students who are liked by more than one other student. */
SELECT name, grade 
 FROM 
 (SELECT ID2, count(ID2) as numLiked
   FROM Likes 
   GROUP BY ID2), Highschooler
 WHERE numLiked > 1 AND ID2=ID;
